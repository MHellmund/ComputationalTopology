##### line break required to define a new function #####
# NO even number of #
##### Setting the memory usage #####
# maxobjects 100000000
maxobjects 10000000
maxnodes 99999
monfil result_coh10redux.log
on monitor
# initialize the types of variables #
# Nsusy=Number of supercharges #
# dimD= Dimension of the spacetime #
# dimD_sub, dimDsub=Dimension reduction of SO(D)->SO(d)*SO(10-d) #
# dimV=dim(v) #
# s=spinor, v=vector #
Nsusy=1
dimD=13
dimD_sub=1
dimV=dimD
dimx=dimD%8
rank=0;
s=X [];
v=X [];
### Lie group of SO(D) ###
sod(int d)=
{
loc gn=4-2*(d-d/2*2);
loc rankd=d/2;
loc sogroup=T0;
if d==6 then sogroup=A3 else
 if d>4 then sogroup=Lie_group(gn,rankd) else
   if d==4 then sogroup=A1A1 else
       if d==3 then sogroup=A1 else
            if d==2 then sogroup=T1 else
                  sogroup=T0;
            fi;
      fi;
   fi;
 fi;
fi;
sogroup
}
### the vector representation of SO(d), 0<d<dimD ###
vDim(int d)=
{
loc rankd=d/2;
loc vd=X [];
if d==0 || d==1 then vd=X [] else
      if d==2 then vd=X [2]+ X [-2] else
         if d==3 then vd=X [2] else
            if d==4 then vd=X [1,1] else
               if d==6 then vd=X [0,1,0] else
                  if d>=5 then vd=X (1+null(rankd-1))
                  fi;
               fi;
            fi;
         fi;
      fi;
fi;
# different function type if use print(vd) #
vd
###
# d=0	T0	 v=[]
# d=1	U(1)	 v=[0]
# d=2	T1	 v=[2]+[-2]
# d=3	SU(2)	 v=[2]
# d=4	A1A1	 v=[1,1]
# d=6	A3(NOT D3: labels reordered!)	 v=[0,1,0]
}
### the spinor representation of SO(d), 0<d<dimD ###
sDim(int d)=
{
loc rankd=d/2;
loc sd=X [];
if d==0 || d==1 then sd=X [] else
   if d==2 then sd=X [1]+ X [-1] else
      if d==6 then sd=X [0,0,1] +X [1,0,0] else
         if d>=4 && d%2==0 then sd=1X (null(rankd-1)+1)+ 1X (null(rankd-2)+1+0) else
            if d>=3 && d%2==1 then sd=1X (null(rankd-1)+1)
            fi;
         fi;
      fi;
   fi;
fi;
sd
###
# d=0	T0	 s=[]
# d=1	U(1)	 s=[]
# d=2	T1	 s=[1]+[-1]?
# d=3	SU(2)	 s=[1]
# d=4	A1A1	 s=[1,0]+[0,1]
# d=6	A3(NOT D3: labels reordered!)	 s=[1,0,0]+[0,0,1]
# d>=4 & even	D4	 s=[0,...,0,1]+[0,...,1,0]
# d>=3 & odd	D4	 s=[0,...,0,1]
# branch([0,0,0,0,1],A3A1A1,res_mat(A3A1A1,D5),D5) = 1X[0,0,1,1,0] +1X[1,0,0,0,1]
# branch([0,0,0,0,1],B3A1A1,res_mat(B3A1A1,B5),B5) =1X[0,0,1,0,1] +1X[0,0,1,1,0]
}
##### Set up the parameters: s, v, rank, the default group #####
setparam(int dimDsub)=
{
dimD_sub=dimDsub;
rank=dimD/2;
rank2=(dimD-dimDsub)/2;
Nt=0;
# Ncomplexify=1;
s=X [];
v=X [];
ssusy=[];
vsusy=null(Nsusy-1);
gsusy=T0;
lieG=T0;
### note any torus or even SO(d) will be moved to the end #
#  if dimD_sub>dimD/2 then dimD_sub=dimD-dimD_sub; fi;
# if dimDsub%2==0 then
#    lieG=sod(dimD-dimDsub)*sod(dimDsub);
# else
    lieG=sod(dimDsub)*sod(dimD-dimDsub);
# fi;
setdefault sod(dimD);
if Nsusy>1 then 
  gsusy=Lie_group(1,Nsusy-1);
  ssusy=null(Nsusy-2);
  fi;
if dimx==1 || dimx==2 || dimx==3 then
   Nt=0; 
#   if Nsusy==1 then #
  if dimDsub==0 || dimDsub==dimD then s=sDim(dimD)[1] else
      if dimDsub%2==0 then
         if dimDsub==2 then
            if dimD%2==1 then s=X (expon(sDim(dimD-dimDsub),1)^expon(sDim(dimDsub),1))+ X (expon(sDim(dimD-dimDsub),1)^expon(sDim(dimDsub),2)) else
               s=X (expon(sDim(dimD-dimDsub),1)^expon(sDim(dimDsub),1))+ X (expon(sDim(dimD-dimDsub),2)^expon(sDim(dimDsub),2))
            fi;
        else
         if dimD%2==1 then s=X (expon(sDim(dimDsub),1)^expon(sDim(dimD-dimDsub),1))+ X (expon(sDim(dimDsub),2)^expon(sDim(dimD-dimDsub),1)) else
            s=X (expon(sDim(dimDsub),1)^expon(sDim(dimD-dimDsub),1))+ X (expon(sDim(dimDsub),2)^expon(sDim(dimD-dimDsub),2))
         fi;
        fi;
      else
         if dimD%2==0 then s=X (expon(sDim(dimDsub),1)^expon(sDim(dimD-dimDsub),1)) else
            s=X (expon(sDim(dimDsub),1)^expon(sDim(dimD-dimDsub),1))+ X (expon(sDim(dimDsub),1)^expon(sDim(dimD-dimDsub),2))
         fi;
       fi;
     fi;
# the torus T1 always reordered to the end, check the labeling by diagram #
   if dimDsub==2 then 
      v=X (null(rank2)^expon(vDim(dimDsub),1))+X (null(rank2)^expon(vDim(dimDsub),2)); 
   else
      v=X (expon(vDim(dimDsub),1)^null(rank2));
   fi;
#         s= X (null(rank-1)+1);
#         v= X (1+null(rank-1));
#         if dimDsub==2 then
#             s=branch(s,lieG,res_mat(closure(id(rank)-1)));
#             v=branch(v,lieG,res_mat(closure(id(rank)-1)));
#          else if dimDsub>0 then
#             s=branch(s,lieG,res_mat(lieG));
#             v=branch(v,lieG,res_mat(lieG));
#          fi; fi;
      if Nsusy>1 then
         s0=poly_null(rank); v0=poly_null(rank);
         for i=1 to length(s) do
         # s= X ((null(rank-1)+1)^(1+ssusy)) + X ((null(rank-1)+1)^(ssusy+1));
             s0=s0+coef(s,i) X ((expon(s,i))^(1+ssusy)) + coef(s,i) X ((expon(s,i))^(ssusy+1));
         od;
         for i=1 to length(v) do
            # v= X ((1+null(rank-1))^vsusy);
              v0=v0+coef(v,i) X ((expon(v,i))^vsusy);
          od;
         s=s0; v=v0;
     fi;
#     if dimD==3 then v= X ([2]^vsusy); fi;
# Note that LiE rearrange the torus to the end of other simple groups #
### the following code has not been updated for dim reduction! ###
else if dimx==4 || dimx==0 then
   Nt=0; 
   s=1X ((null(rank-1)+1)^(1+ssusy))+ 1X ((null(rank-2)+1+0)^(ssusy+1));
   v=1X ((1+null(rank-1))^vsusy);
         if dimD==4 then
            v=X([1,1]^vsusy);
          fi;
 #    fi;
#   fi;
else
# if dimx==5 || dimx==6 || dimx==7 then
   Nt=1; 
   if Nsusy==1 then
        s= X (null(rank-1)+1+1);
        v= X(1+null(rank));
    else
        s= X ((null(rank-1)+1+1)^(1+ssusy))+X ((null(rank-1)+1+1)^(ssusy+1));
        v= X((1+null(rank))^vsusy);
     fi;
   lieG=lieG*A1;
fi;
fi;
setdefault lieG*gsusy;
#rank=rank+Nt+Nsusy-1;
rank=Lie_rank;
dimV=dim(v);
}
setparam(dimD_sub)
##### calculate content of superfields #####
# r(m,n) = Sym^m S \otimes Wedge^n V #
r(int m,n)=
{
if n<0 then poly_null(rank) else
        if m<0 then poly_null(rank) else
                if n==0 then sym_tensor(m,s) else
                        tensor(sym_tensor(m,s),alt_tensor(n,v))
                fi;
        fi;
fi;
}
##### set negative multiplicities to zero #####
pos_pol(pol p)=
{loc q=p;
for i=1 to length(p) do
        if coef(p,i)<0 then q=q-p[i];
        fi;
od;
q}
##### subtract multiplicities propagating from the left ######
left(int m,n)=
{
loc t=poly_null(rank);
loc n0=0;
if m-2<0 then
        r(m,n);
else
        k=m+2*n;
        if k<2*dimV then n0=k/2 else
                if k>=2*dimV then  n0=dimV
                fi;
        fi;
        t=r(k-2*n0,n0);
        for i=n0-1 downto n do
                t=pos_pol(r(k-2*i,i)-t);
        od;
        t;
fi
}
##### subtract multiplicities propagating to the right #####
right(int m,n)=
{
loc t=poly_null(rank);
if n-1<0 then
        r(m,n);
else
        k=m+2*n;
        t=r(k,0);
        for i=1 to n do
                t=pos_pol(r(k-2*i,i)-t);
        od;
        t;
# r(m,n)-Ker(m,n);
fi
}
##### calculate candidate cohomologies to each differential #####
# h(int m, n)=pos_pol(r(m,n)-left(m-2,n+1)-right(m+2,n-1))
h(int m, n)=pos_pol(r(m,n)-left(m-2,n+1)-r(m+2,n-1))
# h(int m, n)=
# {
# loc h0=poly_null(rank);
# loc hleft=poly_null(rank);
# loc hvec=null(rank);
# loc rcoef=0;
# loc rrcoef=0;
# hleft=pos_pol(r(m,n)-left(m-2,n+1));
# lenghleft=length(hleft);
# h0=hleft;
# for i=1 to lenghleft do
#       hvec=expon(hleft,i);
#       rcoef=r(m+2,n-1)|hvec;
#       rrcoef=r(m+4,n-2)|hvec;
#       if rcoef>0 && rrcoef>0 then
#             h0=pos_pol(h0-rcoef X hvec);
#       else
#       
# od;
# }
##### sum the candidate cohomologies to the degree k #####
coh(int k)=
{
loc t=poly_null(rank);
loc iMax=k/2;
if k>2*dimV then iMax=dimV; fi;
for i=0 to iMax do
        t=t+h(k-2*i, i);
        od;
        t;
}
### cohomologies marked with readable superscript ###
cohlist(int k)=
{
loc t="H_{D="+dimD_sub+"+"+(dimD-dimD_sub)+",k="+k+"}=";
#loc cc="";
loc rH=poly_null(rank);
loc iMax=k/2;
if k>2*dimV then iMax=dimV; fi;
for i=0 to iMax do
#    cc="";
      rH=h(k-2*i, i);
      for j=1 to length(rH) do
         t=t+" +"+(coef(rH,j))+(expon(rH,j))+"_H("+(k-2*i)+","+(i)+")";
       od;
#       print(cc);
#        t=t+cc;
od;
#print("The cohomologies found when SO("+dimD+") is restricted to its subgroup SO("+dimD_sub+")*SO("+(dimD-dimD_sub)+"), and Nsusy="+Nsusy+":");
print(t);
#print("where _H(m,n) corresponds to the cohomology found in Sym^{m}S wedge^{n}V");
}
### Euler characteristics of cohomology ###
eulercoh(int k)=
{
loc t=poly_null(rank);
loc iMax=k/2;
if k>2*dimV then iMax=dimV; fi;
for i=0 to iMax do
        t=t+ (-1)^i*h(k-2*i, i);
        od;
        t
}
### Euler characteristics of a representation in the cochain complex  ###
eulerChar(vec Arep; int k)=
{
loc t=0;
loc iMax=k/2;
if k>2*dimV then iMax=dimV; fi;
for i=0 to iMax do
        t=t+ (-1)^i*(r(k-2*i, i)|Arep);
        od;
        t
}
### check whether the two Euler characteristics above are equal ###
eulercheck(int kmax)=
{
loc t1=poly_null(rank);
loc t2=poly_null(rank);
loc Arep=[];
loc lt=0;
print("Check the Euler characteristics when D="+dimD_sub+"+"+(dimD-dimD_sub)+", Nsusy="+Nsusy);
for ik=2 to kmax do
     t1=eulercoh(ik);
     t2=poly_null(rank);
     lt=length(t1);
    for i=1 to lt do
        Arep=expon(t1,i);
        t2=t2+eulerChar(Arep,ik) X Arep;
      od;
      print(18*"-");
      print("Euler characteristics of the cohomology:");
      print("chi{H("+ik+")}:"); print(t1);
      print("Euler characteristics from the alt_sum of the multiplicities in the cochain complex"); print(t2);
      if t1==t2 then print("Bingle! The Euler characteristics are verified when k="+ik) else
         print("Problem in the Euler characteristics of the cohomology when k="+ik)
      fi;
   od;
}
# eulercheck()=eulercheck(2*dimV+4)
eulercheck()=eulercheck(dimD+4)
### The cohomology generators ###
hgen(int m, n)=pos_pol(h(m,n)-tensor(s,h(m-1,n)))
hgenlist(int maxk)=
{
print("The cohomology generators assuming maximal propagation when D="+dimD_sub+"+"+(dimD-dimD_sub)+", N="+Nsusy+":");
### The generator h(1,0) is the spinor ###
# print("H^"+1+","+0+"=");
# print(h(1,0)); 
for ikk=2 to maxk do
  #print("k="+ikk+":");
  iMax=ikk/2;
  if ikk>2*dimV then iMax=dimV; fi;
  for i=0 to iMax do
	if coef(hgen(ikk-2*i,i),1)!=0 then
	print("H^"+ikk+","+i+"=");
	print(hgen(ikk-2*i,i)); 
	#print("H^"+ikk+","+i+"="+(hgen(ikk-2*i,i))); 
	fi;
  od;
od;
print("where H^{k,n}, k=m+2n");
print(18*"-");
}
hgenlist()=hgenlist(dimD+4)
# hgenlist()=hgenlist(2*dimV+2)
### Test if the representations for the spinor and the vector is all right? ###
susytest()=
{
#if coef(r(0,1)-h(0,1),1)!=0 && dim(v)==dimD && (r(2,1)/(all_one(rank-1)+(Nt*10^9+1)))|null(rank)>0 then print("Good choice of representations of the spinor s and the vector v!") else 
if coef(r(0,1)-h(0,1),1)>0 && dim(v)==dimD_sub && r(2,1)|null(rank)>0 then print("Good choice of representations of the spinor s and the vector v!") else 
   print("Bad choice of representations of the spinor s or the vector v!?");
   print("coef(r(0,1)-h(0,1),1)>0?  "+(coef(r(0,1)-h(0,1),1)));
   print("dim(v)==dimD_sub?  "+(dim(v)));
   print("r(2,1)|null(rank)>0?  "+(r(2,1)|null(rank)));
   fi;
}
susytest
##### Prove the maximal propagation #####
### different variable name kk ###
# sed -e :a -e '$!N;s/\n[[:space:]]*\\//g;s/\\\n[[:space:]]*//g;s/==>+/==>/g;ta' -e 'P;D' result.txt >result_formated.txt#
# sed -e '{s/\ //g; s/\\//g;}' result.txt |awk '{printf"%s",$0}' |sed -e 's/==>+/\n==>/g;s/:/:\n/g;'#
maxprop(int kk)=
{
iMax=kk/2;
if kk>2*dimV then iMax=dimV; fi;
# if kk>4*(rank-Nt) then iMax=2*(rank-Nt); fi;
print("k="+kk+":");
loc mincoef=0;
loc rB=poly_null(rank);
loc rH=poly_null(rank);
loc HH=poly_null(rank);
loc HH_text="";
loc cc="";
loc list_SxTensor=1;
if list_SxTensor==1 then
  for i=iMax downto 0 do
      SxH=tensor(s,h(kk-1-2*i, i));
      for j=1 to length(h(kk-1-2*i, i)) do
         cc=(coef(h(kk-1-2*i,i),j))+"Sx"+(expon(h(kk-1-2*i,i),j))+"_H"+(i)+"=";
         #print("Sx\");
         #print(h(kk-1-2*i,i)[j]);
         #print("\_H_"+(i)+"=\");
         print(cc);
         print(SxH);
      od;
#      B_lowk=pos_pol(r(kk-1-2*i,i)-h(kk-1-2*i,i)-r(kk-1-2*(i-1),i-1));
      B_lowk=left(kk-1-2*i,i)-h(kk-1-2*i,i);
      SxB=tensor(s,B_lowk);
      for j=1 to length(B_lowk) do
         SB=tensor(s,B_lowk[j]);
         cc=(coef(B_lowk,j))+"Sx"+(expon(B_lowk,j))+"_PB"+(i)+"=";
        ### PB here denote the preimage of boundaries ###
         print(cc);
         print(SB);
      od;
 od;
fi;
###
print("");print("The chain complex when k="+kk+", D="+dimD_sub+"+"+(dimD-dimD_sub)+", Nsusy="+Nsusy+":");
print("0==>") ;
for i=iMax downto 0 do
      cc="==>";
#      SxH=tensor(s,h(kk-1-2*i, i));
#      B_lowk=pos_pol(r(kk-1-2*i,i)-h(kk-1-2*i,i)-r(kk-1-2*(i-1),i-1));
### Assume maximal propagation for low k ###
#      B_lowk=right(kk-1-2*(i-1),i-1)-h(kk-1-2*(i-1),i-1);
      B_lowk=left(kk-1-2*i,i)-h(kk-1-2*i,i);
      SxB=tensor(s,B_lowk);
       # print("==>");
      for j=1 to length(rB) do
        cc=cc+" +"+(coef(rB,j))+(expon(rB,j))+"_B"+(i+1);
      od;
### supersymmetry condition ###
#   if kk<=2*dimV && i*2==kk then
#       rB=r(0,kk/2); 
#       rH=poly_null(rank);
#   else
      rHrB=r(kk-2*i,i)-rB;
      rB=poly_null(rank);
      for j=1 to length(rHrB) do
         if coef(rHrB,j)<=r(kk-2*(i-1),i-1)|expon(rHrB,j) then mincoef=coef(rHrB,j) else mincoef=r(kk-2*(i-1),i-1)|expon(rHrB,j); fi;
         if (kk>2*dimV || i*2!=kk) && mincoef>SxB|expon(rHrB,j) then mincoef=SxB|expon(rHrB,j); fi;
#         if !kk<=2*dimV && !i*2==kk && mincoef>SxB|expon(rHrB,j) then mincoef=SxB|expon(rHrB,j); fi;
#           if mincoef>SxB|expon(rHrB,j) then mincoef=SxB|expon(rHrB,j); fi;
         rB=rB+mincoef X expon(rHrB,j);
      od;
      rH=rHrB-rB;
#   fi;
      HH=HH+rH;
      for j=1 to length(rB) do
         cc=cc+" +"+(coef(rB,j))+(expon(rB,j))+"_PB"+(i);
         # print("\+\");
         # print(rB[j]);
         ### B here denote the boundaries###
         # print("\_B_"+(i));
       od;
      for j=1 to length(rH) do
         cc=cc+" +"+(coef(rH,j))+(expon(rH,j))+"_H"+(i);
         HH_text=HH_text+" +"+(coef(rH,j))+(expon(rH,j))+"_H("+(kk-2*i)+","+(i)+")";
         # print("\+\");
         # print(rH[j]);
         ### H here denote the cohomologies###
         # print("\_H_"+(i));
       od;
       print(cc);
  od;
print("==>0");
print("where _H, _B, _PB denote the cohomology, boundary, and preimage of boundary, respectively.");
print("Cohomology:");
print(HH_text);
if HH==coh(kk) then 
   print("Bingle! Our cohomology formula is verified.");
else
   print("The maximal propagation principle might be not sufficient here!")
fi;
}
### Sx[a,b,c,d,e], [a,b,c,d,e]x\wedge^nV ###
# NO if else if fi, BUT if else fi, OR if else if fi;fi; #
xsv(int n; vec iv)={
	loc aRep=6*rank*all_one(rank);
	loc isv=poly_null(rank);
	if n==0 then isv=tensor(s, 1 X aRep) else
		if n>=1 then isv=tensor(1 X aRep, r(0,n)) fi;
		fi;
	loc lensv=length(isv);
	loc epsi=null(lensv, rank);
	loc sv=poly_null(rank);
	loc av=null(rank);
	loc avt="[";
	for i=1 to rank do
	  avt=avt+"a"+i+",";
	 od;
 	if n==0 then print("Sx"+avt+"]=") else
	if n>=1 then print(avt+"] x \wedge^"+(n)+"V="); fi;
#	if n==0 then print("Sx[a,b,c,d,e]=") else
#		if n>=1 then print("[a,b,c,d,e] x \wedge^"+(n)+"V="); fi;
	fi;
	for i=1 to lensv do
	    im=1;
	    avtx="X[";
	    for j=1 to rank do
	        epsi[i,j]=expon(isv,i)[j]-aRep[j];
	        if epsi[i,j]>=0 then
	           avtx=avtx+" a"+j+"+"+(epsi[i,j])+","
	          else avtx=avtx+" a"+j+(epsi[i,j])+","; 
	         fi;
	        av[j]=iv[j]+epsi[i,j];
	        if av[j]<0 then im=0; fi;
	     od;
	     print("+"+(coef(isv,i))+avtx+"]");
	    # print("+"+(coef(isv,i))+"X[a+"+(epsi[i,1])+",b+"+(epsi[i,2])+",c+"+(epsi[i,3])+",d+"+(epsi[i,4])+",e+"+(epsi[i,5])+"]");
	    if im==1 then
	      	sv=sv+coef(isv,i) X av;
	   fi;
	 od;
	 print("epsilon=");
	 print(epsi);
	 print(sv);
	 if n==0 then print("The result above differed with Sx"+(iv)+":");
	 else
	    print("The result above differed with "+(iv)+"x\wedge^"+n+"V:");
	 fi;
	 if n==0 then print(sv-tensor(s,1 X iv)) else
	 	if n>=1 then print(sv-tensor(1 X iv, r(0,n))) fi;
	 	fi;
}
### search scalars in representations for one certain reduction ###
scalarsearch(int dimDsub)=
{
loc kmax=2*dim(v)+4;
loc imax=0;
# loc sResult="";
# loc vResult="";
print("Scalars found when SO("+dimD+") is restricted to its subgroup SO("+dimDsub+")*SO("+(dimD-dimDsub)+"), and Nsusy="+Nsusy+":");
print("s="); print(s); print("v=");print(v);
 for ik=2 to kmax do
      if ik>2*dim(v) then imax=dim(v) else 
         imax=ik/2;  fi;
    for i=0 to imax do
       m=ik-2*i;
       if r(m,i)|null(rank)>0 then 
#         if m==0 then sResult="" else
#            if m==1 then sResult="S" else
#               sResult="Sym^"+m+" S";    fi;fi;
#         if i==0 then vResult="" else
#            vResult="wedge^"+i+" V";    fi;
      print("Sym^"+m+"S"+" wedge^"+i+"V  when k="+ik);
      fi;
    od;
 od;
}
### do batch jobs for all possible dimension reductions ###
reductD()=
{
loc kmax=0;
# for iDim=0 to 2 do
for iDim=1 to dimD do
   setparam(iDim);
   kmax=2*dim(v)+4;
   print(25*"*");
#   print("The cohomologies found when SO("+dimD+") is restricted to its subgroup SO("+iDim+")*SO("+(dimD-iDim)+"), and Nsusy="+Nsusy+":");
#   print("Here _H(m,n) corresponds to the cohomology found in Sym^{m}S wedge^{n}V");
   print("s=");
   print(s);
   print("v=");
   print(v);
###   scalarsearch(iDim);
   hgenlist;
###    eulercheck(kmax);
#   for ik=2 to kmax do
#     print(cohlist(ik));
#   od;
od;
}