#Author: Renjun Xu#
#E-mail: rxu@ucdavis.edu#
#This project is licensed under the terms of the MIT license.#

#####line break required to define a new function#####
##### definitions for D=10 SYM #####
maxobjects 10000000
setdefault D5
rank=5
#r(int n)=1X[0,0,0,n,0]
s=X[0,0,0,0,1]
v=X[1,0,0,0,0]
##### calculate content of superfields #####
r(int m,n)=
{
if n<0 then poly_null(rank) else
        if m<0 then poly_null(rank) else
                if n==0 then sym_tensor(m,s) else
                        tensor(sym_tensor(m,s),alt_tensor(n,v))
                fi;
        fi;
fi;
}
##### set negative multiplicities to zero #####
pos_pol(pol p)=
{loc q=p;
for i=1 to length(p) do
        if coef(p,i)<0 then q=q-p[i];
        fi;
od;
q}
##### subtract multiplicities from the left # #####
left(int m,n)=
{
loc t=poly_null(rank);
loc n0=0;
if m-2<0 then
        r(m,n);
else
        k=m+2*n;
        if k<4*rank then n0=k/2 else
                if k>=4*rank then  n0=2*rank
                fi;
        fi;
        t=r(k-2*n0,n0);
        for i=n0-1 downto n do
                t=pos_pol(r(k-2*i,i)-t);
        od;
        t;
fi
}
##### subtract multiplicities from the right #####
right(int m,n)=
{
loc t=poly_null(rank);
if n-1<0 then
        r(m,n);
else
        k=m+2*n;
        t=r(k,0);
        for i=1 to n do
                t=pos_pol(r(k-2*i,i)-t);
        od;
        t;
# r(m,n)-Ker(m,n);
fi
}
##### calculate candidate cohomologies per differentials#####
h(int m, n)=pos_pol(r(m,n)-left(m-2,n+1)-right(m+2,n-1))
#####calculate candidate cohomologies #####
coh(int k)=
{
loc t=poly_null(rank);
for i=0 to k/2 do
        t=t+h(k-2*i, i);
        od;
        t;
}
#####Prove the maximal propagation#####
###different variable name kk########
#sed -e 's/\ //g; s/\\//g;}' result.txt |awk '{printf"%s",$0}' |sed -e '{s/<==+/\n<==/g;s/:/:\n/g;s/+/\ +\ /g;}'
maxprop(int kk)=
{
print("k="+kk+":");
loc rB=poly_null(rank);
for i=0 to kk/2 do
      SxH=tensor(s,h(kk-1-2*i, i));
      for j=1 to length(h(kk-1-2*i, i)) do
         print("Sx\");
         SH=h(kk-1-2*i,i)[j];
         print(SH);
         print("\_H_"+(i+1)+"=\");
         print(tensor(s, h(kk-1-2*i, i)[j]));
      od;
      B_lowk=pos_pol(r(kk-1-2*i,i)-h(kk-1-2*i,i)-r(kk-1-2*(i-1),i-1));
      SxB=tensor(s,B_lowk);
      for j=1 to length(B_lowk) do
         SB=tensor(s,B_lowk[j]);
         print("Sx\");
         print(B_lowk[j]);
         print("\_B_"+(i+1)+"=\");
         print(SB);
      od;
od;
for i=0 to kk/2 do
#      SxH=tensor(s,h(kk-1-2*i, i));
      B_lowk=pos_pol(r(kk-1-2*i,i)-h(kk-1-2*i,i)-r(kk-1-2*(i-1),i-1));
      SxB=tensor(s,B_lowk);
     if i==0 then print("0<=="); fi;
     print("<==");
      for j=1 to length(rB) do
        print("\+\");
        print(rB[j]);
        print("\_B_"+i);
      od;
#      print("kk="+kk);
#      print("B_lowk:");
#      print(B_lowk);
#      print("SxB:");
#      print(SxB);
      rH=pos_pol(r(kk-2*i,i)-rB-SxB);
      if kk<=20 && i*2==kk-2 then
         rH=pos_pol(rH-r(0,kk/2));
         fi; 
      rB=pos_pol(r(kk-2*i,i)-rB-rH);
      for j=1 to length(rH) do
         print("\+\");
         print(rH[j]);
         print("\_H_"+(i+1));
       od;
      for j=1 to length(rB) do
         print("\+\");
         print(rB[j]);
         print("\_B_"+(i+1));
       od;
#      print(rC);
  od;
print("<==0");
}

